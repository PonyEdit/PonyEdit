<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd" [
<!-- names must start with a letter, ideogram or underscore. \w matches any
		 word character *or* a number, hence the lookahead --><!ENTITY name "(?![0-9])[\w_:][\w.:_-]*">
<!ENTITY entref "&amp;(#[0-9]+|#[xX][0-9A-Fa-f]+|&name;);">
]>
<language name="JSX" section="Scripts" mimetype="text/jsx" extensions="*.jsx" version="0.0.1" priority="10" kateversion="3.12.0" indenter="cstyle" author="RafaÅ‚ Rzepecki (divided.mind@gmail.com)" license="MIT">
  <highlighting>
    <list name="keywords">
      <item> break </item>
      <item> case </item>
      <item> catch </item>
      <item> const </item>
      <item> continue </item>
      <item> debugger </item>
      <item> default </item>
      <item> delete </item>
      <item> do </item>
      <item> else </item>
      <item> finally </item>
      <item> for </item>
      <item> function </item>
      <item> if </item>
      <item> in </item>
      <item> instanceof </item>
      <item> new </item>
      <item> return </item>
      <item> switch </item>
      <item> this </item>
      <item> throw </item>
      <item> try </item>
      <item> typeof </item>
      <item> var </item>
      <item> void </item>
      <item> while </item>
      <item> with </item>
    </list>
    <list name="reserved">
      <item> class </item>
      <item> enum </item>
      <item> export </item>
      <item> extends </item>
      <item> import </item>
      <item> super </item>

      <!-- The following keywords are reserved only in strict-mode -->
      <item> implements </item>
      <item> interface </item>
      <item> let </item>
      <item> package </item>
      <item> private </item>
      <item> protected </item>
      <item> public </item>
      <item> static </item>
      <item> yield </item>
    </list>
    <list name="primitives">
      <item> Infinity </item>
      <item> NaN </item>
      <item> false </item>
      <item> null </item>
      <item> true </item>
      <item> undefined </item>
    </list>
    <contexts>
      <context name="Nested JS" lineEndContext="#stay" attribute="Normal Text">
        <DetectChar char="}" context="#pop#pop#pop"/>
        <IncludeRules context="Normal"/>
      </context><context name="Nested JS text" lineEndContext="#stay" attribute="Normal Text">
        <DetectChar char="}" context="#pop"/>
        <IncludeRules context="Normal"/>
      </context><context attribute="Normal Text" lineEndContext="#stay" name="Normal">
        <keyword attribute="Keyword" String="keywords"/>
        <keyword attribute="Reserved" String="reserved"/>
        <keyword attribute="Keyword" context="NoRegExp" String="primitives"/>
        <IncludeRules context="FindXML (XML)"/>
      
        <DetectSpaces/>
        <StringDetect attribute="Region Marker" context="region_marker" String="//BEGIN" beginRegion="Region1"/>
        <StringDetect attribute="Region Marker" context="region_marker" String="//END" endRegion="Region1"/>

        <Float attribute="Float" context="NoRegExp"/>
        <HlCOct attribute="Octal" context="NoRegExp"/>
        <HlCHex attribute="Hex" context="NoRegExp"/>
        <Int attribute="Decimal" context="NoRegExp"/>
        <AnyChar context="NoRegExp" String="])"/>

        <keyword attribute="Keyword" String="keywords"/>
        <keyword attribute="Reserved" String="reserved"/>
        <keyword attribute="Keyword" context="NoRegExp" String="primitives"/>

        <!--DetectIdentifier-->
        <RegExpr attribute="Objects" context="Object Member" String="[a-zA-Z_$][\w$]*(?=\s*\.)"/>
        <!--DetectIdentifier-->
        <RegExpr attribute="Object Member" context="NoRegExp" String="[a-zA-Z_$][\w$]*(?=\s*\()"/>
        <DetectChar context="Object Member" char="."/>
        <!--DetectIdentifier-->
        <RegExpr context="NoRegExp" String="[a-zA-Z_$][\w$]*"/>

        <DetectChar attribute="String" context="String" char="&quot;"/>
        <DetectChar attribute="String" context="String SQ" char="'"/>

        <IncludeRules context="##Doxygen"/>
        <Detect2Chars attribute="Comment" context="Comment" char="/" char1="/"/>
        <Detect2Chars attribute="Comment" context="Multi/inline Comment" char="/" char1="*" beginRegion="Comment"/>

        <DetectChar attribute="Regular Expression" context="(regex caret first check)" char="/"/>

        <DetectChar attribute="Symbol" context="Object" char="{" beginRegion="Brace"/>
        <DetectChar attribute="Symbol" context="Conditional Expression" char="?"/>

        <AnyChar attribute="Symbol" String=":!%&amp;+,-/.*&lt;=&gt;?|~^;"/>
      </context>

      <context attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop" name="Object Member">
        <DetectChar char="."/>
        <!--DetectIdentifier-->
        <RegExpr attribute="Objects" context="Object Member" String="[a-zA-Z_$][\w$]*(?=\s*\.)"/>
        <!--DetectIdentifier-->
        <RegExpr attribute="Object Member" String="[a-zA-Z_$][\w$]*"/>
        <IncludeRules context="NoRegExp"/>
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" fallthrough="true" fallthroughContext="#pop" name="NoRegExp">
        <Detect2Chars context="#pop" lookAhead="true" char="/" char1="/"/>
        <Detect2Chars context="#pop" lookAhead="true" char="/" char1="*"/>
        <DetectChar context="#pop" char="/"/>
        <DetectSpaces/>
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="Conditional Expression">
        <DetectChar context="#pop" char=":"/>
        <IncludeRules context="Normal"/>
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="Object">
        <!-- Mostly required for define: in switch blocks -->
        <keyword attribute="Keyword" String="keywords"/>
        <!--DetectIdentifier-->
        <RegExpr attribute="JSON" String="[a-zA-Z_$][\w$]*\s*(?=:)"/>
        <DetectChar attribute="Symbol" char="}" endRegion="Brace" context="#pop"/>
        <IncludeRules context="Normal"/>
      </context>

      <context attribute="String" lineEndContext="#pop" name="String">
        <HlCStringChar attribute="Char"/>
        <LineContinue/>
        <DetectChar attribute="String" context="#pop" char="&quot;"/>
      </context>
      <context attribute="String" lineEndContext="#pop" name="String SQ">
        <HlCStringChar attribute="Char"/>
        <LineContinue/>
        <DetectChar attribute="String" context="#pop" char="'"/>
      </context>

      <context attribute="Comment" lineEndContext="#pop" name="Comment">
        <IncludeRules context="##Alerts"/>
        <IncludeRules context="##Modelines"/>
      </context>
      <context attribute="Comment" lineEndContext="#stay" name="Multi/inline Comment">
        <IncludeRules context="##Alerts"/>
        <IncludeRules context="##Modelines"/>
        <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" endRegion="Comment"/>
      </context>

      <context attribute="Regular Expression" lineEndContext="#stay" name="Regular Expression">
        <RegExpr attribute="Regular Expression" context="#pop#pop" String="/\w*"/>
        <RegExpr attribute="Pattern Internal Operator" String="\{[\d, ]+\}"/>
        <RegExpr attribute="Pattern Internal Operator" String="\\[bB]"/>
        <RegExpr attribute="Pattern Character Class" String="\\[nrtvfDdSsWw]"/>
        <DetectChar attribute="Pattern Character Class" context="(charclass caret first check)" char="["/>
        <RegExpr attribute="Pattern Internal Operator" String="\\."/>
        <RegExpr attribute="Pattern Internal Operator" String="\$(?=/)"/>
        <AnyChar attribute="Pattern Internal Operator" String="?+*()|"/>
      </context>
      <context attribute="Pattern Character Class" lineEndContext="#stay" name="Regular Expression Character Class">
        <RegExpr String="\\[\[\]]"/>
        <RegExpr attribute="Pattern Internal Operator" String="\\."/>
        <DetectChar attribute="Pattern Character Class" context="#pop#pop" char="]"/>
      </context>
      <context attribute="Pattern Internal Operator" lineEndContext="#pop" name="(regex caret first check)" fallthrough="true" fallthroughContext="Regular Expression">
        <DetectChar attribute="Pattern Internal Operator" context="Regular Expression" char="^"/>
      </context>
      <context attribute="Pattern Internal Operator" lineEndContext="#pop" name="(charclass caret first check)" fallthrough="true" fallthroughContext="Regular Expression Character Class">
        <DetectChar attribute="Pattern Internal Operator" context="Regular Expression Character Class" char="^"/>
      </context>

      <context name="region_marker" attribute="Region Marker" lineEndContext="#pop">
        <DetectIdentifier/>
        <DetectSpaces/>
      </context>
    
  <context name="Start (XML)" attribute="Normal Text (XML)" lineEndContext="#stay">
    <IncludeRules context="FindXML (XML)"/>
  </context>

  <context name="FindXML (XML)" attribute="Normal Text (XML)" lineEndContext="#stay">
        <DetectChar char="{" context="Nested JS text"/>
      
    <DetectSpaces/>
    <StringDetect attribute="Comment (XML)" context="Comment (XML)" String="&lt;!--" beginRegion="comment"/>
    <StringDetect attribute="CDATA (XML)" context="CDATA (XML)" String="&lt;![CDATA[" beginRegion="cdata"/>
    <RegExpr attribute="Doctype (XML)" context="Doctype (XML)" String="&lt;!DOCTYPE\s+" beginRegion="doctype"/>
    <RegExpr attribute="Processing Instruction (XML)" context="PI (XML)" String="&lt;\?[\w:_-]*" beginRegion="pi"/>
    <RegExpr attribute="Element (XML)" context="Element (XML)" String="&lt;&name;" beginRegion="element"/>
    <IncludeRules context="FindEntityRefs (XML)"/>
    <DetectIdentifier/>
  </context>

  <context name="FindEntityRefs (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <RegExpr attribute="EntityRef (XML)" context="#stay" String="&entref;"/>
    <AnyChar attribute="Error (XML)" context="#stay" String="&amp;&lt;"/>
  </context>

  <context name="FindPEntityRefs (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <RegExpr attribute="EntityRef (XML)" context="#stay" String="&entref;"/>
    <RegExpr attribute="PEntityRef (XML)" context="#stay" String="%&name;;"/>
    <AnyChar attribute="Error (XML)" context="#stay" String="&amp;%"/>
  </context>


  <context name="Comment (XML)" attribute="Comment (XML)" lineEndContext="#stay">
    <DetectSpaces/>
    <StringDetect attribute="Comment (XML)" context="#pop" String="--&gt;" endRegion="comment"/>
    <RegExpr attribute="Error (XML)" context="#stay" String="-(-(?!-&gt;))+"/>
    <IncludeRules context="##Alerts"/>
    <DetectIdentifier/>
  </context>

  <context name="CDATA (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectSpaces/>
    <DetectIdentifier/>
    <StringDetect attribute="CDATA (XML)" context="#pop" String="]]&gt;" endRegion="cdata"/>
    <StringDetect attribute="EntityRef (XML)" context="#stay" String="]]&amp;gt;"/>
  </context>

  <context name="PI (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <Detect2Chars attribute="Processing Instruction (XML)" context="#pop" char="?" char1="&gt;" endRegion="pi"/>
  </context>

  <context name="Doctype (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectChar attribute="Doctype (XML)" context="#pop" char="&gt;" endRegion="doctype"/>
    <DetectChar attribute="Doctype (XML)" context="Doctype Internal Subset (XML)" char="[" beginRegion="int_subset"/>
  </context>

  <context name="Doctype Internal Subset (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectChar attribute="Doctype (XML)" context="#pop" char="]" endRegion="int_subset"/>
    <RegExpr attribute="Doctype (XML)" context="Doctype Markupdecl (XML)" String="&lt;!(ELEMENT|ENTITY|ATTLIST|NOTATION)\b"/>
    <StringDetect attribute="Comment (XML)" context="Comment (XML)" String="&lt;!--" beginRegion="comment"/>
    <RegExpr attribute="Processing Instruction (XML)" context="PI (XML)" String="&lt;\?[\w:_-]*" beginRegion="pi"/>
    <IncludeRules context="FindPEntityRefs (XML)"/>
  </context>

  <context name="Doctype Markupdecl (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectChar attribute="Doctype (XML)" context="#pop" char="&gt;"/>
    <DetectChar attribute="Value (XML)" context="Doctype Markupdecl DQ (XML)" char="&quot;"/>
    <DetectChar attribute="Value (XML)" context="Doctype Markupdecl SQ (XML)" char="'"/>
  </context>

  <context name="Doctype Markupdecl DQ (XML)" attribute="Value (XML)" lineEndContext="#stay">
    <DetectChar attribute="Value (XML)" context="#pop" char="&quot;"/>
    <IncludeRules context="FindPEntityRefs (XML)"/>
  </context>

  <context name="Doctype Markupdecl SQ (XML)" attribute="Value (XML)" lineEndContext="#stay">
    <DetectChar attribute="Value (XML)" context="#pop" char="'"/>
    <IncludeRules context="FindPEntityRefs (XML)"/>
  </context>

  <context name="Element (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <Detect2Chars attribute="Element (XML)" context="#pop" char="/" char1="&gt;" endRegion="element"/>
    <DetectChar attribute="Element (XML)" context="El Content (XML)" char="&gt;"/>
    <RegExpr attribute="Attribute (XML)" context="Attribute (XML)" String="^&name;"/>
    <RegExpr attribute="Attribute (XML)" context="Attribute (XML)" String="\s+&name;"/>
    <RegExpr attribute="Error (XML)" context="#stay" String="\S"/>
  </context>

  <context name="El Content (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <RegExpr attribute="Element (XML)" context="El End (XML)" String="&lt;/&name;"/>
    <IncludeRules context="FindXML (XML)"/>
  </context>

  <context name="El End (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectChar attribute="Element (XML)" context="#pop#pop#pop" char="&gt;" endRegion="element"/>
    <RegExpr attribute="Error (XML)" context="#stay" String="\S"/>
  </context>

  <context name="Attribute (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
    <DetectChar attribute="Attribute (XML)" context="Value (XML)" char="="/>
    <RegExpr attribute="Error (XML)" context="#stay" String="\S"/>
  </context>

  <context name="Value (XML)" attribute="Other Text (XML)" lineEndContext="#stay">
        <DetectChar char="{" context="Nested JS"/>
      
    <DetectChar attribute="Value (XML)" context="Value DQ (XML)" char="&quot;"/>
    <DetectChar attribute="Value (XML)" context="Value SQ (XML)" char="'"/>
    <RegExpr attribute="Error (XML)" context="#stay" String="\S"/>
  </context>

  <context name="Value DQ (XML)" attribute="Value (XML)" lineEndContext="#stay">
    <DetectChar attribute="Value (XML)" context="#pop#pop#pop" char="&quot;"/>
    <IncludeRules context="FindEntityRefs (XML)"/>
  </context>

  <context name="Value SQ (XML)" attribute="Value (XML)" lineEndContext="#stay">
    <DetectChar attribute="Value (XML)" context="#pop#pop#pop" char="'"/>
    <IncludeRules context="FindEntityRefs (XML)"/>
  </context>

</contexts>
    <itemDatas>
      <itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
      <itemData name="Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
      <itemData name="Reserved" defStyleNum="dsKeyword" italic="true" spellChecking="false"/>
      <itemData name="Function" defStyleNum="dsFunction" spellChecking="false"/>
      <itemData name="Objects" defStyleNum="dsOthers" spellChecking="false"/>
      <itemData name="Object Member" defStyleNum="dsFunction" spellChecking="false"/>

      <itemData name="Decimal" defStyleNum="dsDecVal" spellChecking="false"/>
      <itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
      <itemData name="Char" defStyleNum="dsChar" spellChecking="false"/>
      <itemData name="String" defStyleNum="dsString"/>

      <itemData name="Comment" defStyleNum="dsComment"/>
      <itemData name="Symbol" defStyleNum="dsNormal" spellChecking="false"/>
      <itemData name="Regular Expression" defStyleNum="dsOthers" spellChecking="false"/>
      <itemData name="Pattern Internal Operator" defStyleNum="dsFloat" spellChecking="false"/>
      <itemData name="Pattern Character Class" defStyleNum="dsBaseN" spellChecking="false"/>
      <itemData name="Region Marker" defStyleNum="dsRegionMarker" spellChecking="false"/>
      <itemData name="JSON" defStyleNum="dsDataType" spellChecking="false"/>
    
  <itemData name="Normal Text (XML)" defStyleNum="dsNormal"/>
  <itemData name="Other Text (XML)" defStyleNum="dsNormal"/>
  <itemData name="Comment (XML)" defStyleNum="dsComment" spellChecking="false"/>
  <itemData name="CDATA (XML)" defStyleNum="dsBaseN" bold="1" spellChecking="false"/>
  <itemData name="Processing Instruction (XML)" defStyleNum="dsKeyword" spellChecking="false"/>
  <itemData name="Doctype (XML)" defStyleNum="dsDataType" bold="1" spellChecking="false"/>
  <itemData name="Element (XML)" defStyleNum="dsKeyword" spellChecking="false"/>
  <itemData name="Attribute (XML)" defStyleNum="dsOthers" spellChecking="false"/>
  <itemData name="Value (XML)" defStyleNum="dsString" color="#a00" spellChecking="false"/>
  <itemData name="EntityRef (XML)" defStyleNum="dsDecVal" spellChecking="false"/>
  <itemData name="PEntityRef (XML)" defStyleNum="dsDecVal" spellChecking="false"/>
  <itemData name="Error (XML)" defStyleNum="dsError" spellChecking="false"/>
</itemDatas>
  </highlighting>
</language>
